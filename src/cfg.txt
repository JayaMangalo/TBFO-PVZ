Terminals:
+ - * / % = > < ! [ ] ( ) ' " # : , variable number string str int float char true false none and or not as break continue class def if elif else raise for in from import is pass return while with input print
Variables:
ALGORITHM WHILE FOR DEF CLASS IMPORT FROM DECLARE PRINT INPUT VAR VARIABLE1 VARIABLE2 VARIABLE3 VARIABLE4 VARIABLE5 OPERATOR OTHER_OPERATOR RELATION STRING COMMENT TYPE BOOLEAN AND OR NOT IS NONE AS BREAK CONTINUE FUNCTION_CALL IF ELIF ELSE RAISE RANGE IN PASS RETURN WITH INLINE_FOR INLINE_RANGE
Productions:
ALGORITHM -> ALGORITHM ALGORITHM | WHILE | FOR | DEF | CLASS | IMPORT | FROM | DECLARE | PRINT | INPUT;
VAR -> variable;
DECLARE -> VAR = VARIABLE4 | VAR = [ ] | VAR = [ INLINE_FOR ] | VAR = [ VARIABLE5 ] | VAR OTHER_OPERATOR VARIABLE3;
VARIABLE1 -> VAR | VARIABLE2;
VARIABLE2 -> VARIABLE1 OPERATOR VARIABLE1 | number | BOOLEAN | STRING;
VARIABLE3 -> VAR | number;
VARIABLE4 -> VARIABLE3 | VARIABLE3 OPERATOR VARIABLE3;
VARIABLE5 -> VAR | VAR , VAR;
OPERATOR -> + | - | * | / |  / / | % | * *;
OTHER_OPERATOR -> * = | + = | - = | / = | % = | / / = | * * = | & = | ^ = | > > = | < < =;
DICTIONARY -> VAR = { } | VAR = { VARIABLE3 : VARIABLE3 };
RELATION -> > | > = | < | < = | ! = | = =;
STRING -> ' string ' | " string " | STRING + STRING;
COMMENT -> ' ' ' ALGORITHM ' ' ' | " " " ALGORITHM " " " | # VARIABLE2;
TYPE -> str | int | float | char;
BOOLEAN -> true | false | BOOLEAN AND BOOLEAN | BOOLEAN OR BOOLEAN | NOT BOOLEAN | VARIABLE1 IS VARIABLE1 | VARIABLE1 RELATION VARIABLE1;
NONE -> None;
AND -> and;
OR -> or;
NOT -> not;
AS -> as;
BREAK -> break;
CONTINUE -> continue;
CLASS -> class VAR : ALGORITHM;
DEF -> def VAR ( VARIABLE3 ) : ALGORITHM | def VAR ( VARIABLE3 ) : ALGORITHM RETURN;
FUNCTION_CALL -> VAR ( VARIABLE3 ) | VAR ( ) | TYPE ( VAR ) | FUNCTION_CALL ( FUNCTION_CALL );
IF -> if ( BOOLEAN ) : ALGORITHM | if ( VAR RELATION VARIABLE4 ) : ALGORITHM | IF ELIF | IF ELSE | IF BREAK | IF CONTINUE | IF RAISE | IF PASS;
ELIF -> elif ( BOOLEAN ) : ALGORITHM | elif ( VAR RELATION VARIABLE4 ) : ALGORITHM | ELIF ELIF | ELIF ELSE;
ELSE -> else : ALGORITHM;
RAISE -> raise FUNCTION_CALL;
RANGE -> ( VARIABLE3 ) | ( number , number , number) | ( number , number ) | ( STRING );
FOR -> for VAR IN RANGE : ALGORITHM | for VAR IN VAR : ALGORITHM | for VAR IN STRING : ALGORITHM;
INLINE_RANGE -> ( VARIABLE3 );
INLINE_FOR -> VAR for VAR IN INLINE_RANGE | VAR for VAR in STRING;
FROM -> from VAR IMPORT;
IMPORT -> import VAR | import VAR AS VAR;
IN -> in;
IS -> is;
PASS -> pass;
RETURN -> return BOOLEAN | return VAR | return number OPERATOR number | return STRING | return;
WHILE -> while ( BOOLEAN ) : ALGORITHM | while ( VAR RELATION VARIABLE3 ) : ALGORITHM | while BOOLEAN : ALGORITHM | while VAR RELATION VARIABLE3 : ALGORITHM;
WITH -> with FUNCTION_CALL AS VAR : ALGORITHM;
INPUT -> input ( ) | input ( STRING ) | TYPE ( INPUT );
PRINT -> print ( ) | print ( VARIABLE2 )