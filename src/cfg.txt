Terminals:
+ - * / % = > < ! [ ] ( ) ' " : , & ^ variable number string str int float chr double true false none and or not as break continue class def if elif else raise for in from import is pass return while with input print range
Variables:
ALGORITHM WHILE FOR DEF CLASS IMPORT KURUNG FROM DECLARE DICTIONARY PRINT INPUT VAR VARIABLE1 VARIABLE3 VARIABLE4 OPERATOR OTHER_OPERATOR RELATION STRING STRINGS COMMENT TYPE BOOLEAN AND OR NOT IS NONE AS BREAK CONTINUE FUNCTION_CALL IF ELIF ELSE RAISE RANGE IN PASS RETURN WITH INLINE_FOR INLINE_RANGE
Productions:
ALGORITHM -> ALGORITHM ALGORITHM | WHILE | FOR | DEF | CLASS | IMPORT | FROM | DECLARE | PRINT;
VAR -> variable;
DECLARE -> VAR = VARIABLE4 | VAR = [ ] | VAR = [ INLINE_FOR ] | VAR = [ VARIABLE5 ] | VAR OTHER_OPERATOR VARIABLE3 | DICTIONARY;
VARIABLE3 -> VAR | number ;
VARIABLE4 -> VARIABLE3 | VARIABLE3 OPERATOR VARIABLE3 | VARIABLE3 OTHER_OPERATOR VARIABLE3 | ( VARIABLE4 ) | BOOLEAN | STRING | INPUT | VARIABLE4 , VARIABLE4;
VARIABLE1 -> number | VARIABLE4 OPERATOR VARIABLE4 | BOOLEAN | STRING;
OPERATOR -> + | - | * | / |  / / | % | * *;
OTHER_OPERATOR -> * = | + = | - = | / = | % = | / / = | * * = | & = | ^ = | > > = | < < =;
DICTIONARY -> VAR = { } | VAR = { VARIABLE3 : VARIABLE3 };
RELATION -> > | > = | < | < = | ! = | = =;
STRING -> ' string ' | " string " | STRING + STRING;
STRINGS -> VAR | STRINGS STRINGS;
COMMENT -> " " " STRINGS " " " | ' ' ' STRINGS ' ' ';
KURUNG -> ( ) | ( VARIABLE4 );
TYPE -> str | int | float | double | chr;
BOOLEAN -> true | false | BOOLEAN AND BOOLEAN | BOOLEAN OR BOOLEAN | NOT BOOLEAN | VARIABLE4 IS VARIABLE4 | VARIABLE4 RELATION VARIABLE4;
NONE -> none;
AND -> and;
OR -> or;
NOT -> not;
AS -> as;
BREAK -> break;
CONTINUE -> continue;
CLASS -> class VAR : ALGORITHM;
DEF -> def VAR KURUNG : ALGORITHM | DEF RETURN;
FUNCTION_CALL -> VAR ( VARIABLE3 ) | VAR ( ) | TYPE ( VAR ) | FUNCTION_CALL ( FUNCTION_CALL );
IF -> if ( BOOLEAN ) : ALGORITHM | if BOOLEAN : ALGORITHM | IF ELIF | IF ELSE | IF BREAK | IF CONTINUE | IF RAISE | IF PASS;
ELIF -> elif ( BOOLEAN ) : ALGORITHM | elif BOOLEAN : ALGORITHM | ELIF ELIF | ELIF ELSE;
ELSE -> else : ALGORITHM;
RAISE -> raise KURUNG;
RANGE -> range KURUNG;
FOR -> for VAR IN RANGE : ALGORITHM | for VAR IN VAR : ALGORITHM | for VAR IN STRING : ALGORITHM;
INLINE_RANGE -> ( VARIABLE3 );
INLINE_FOR -> VAR for VAR IN INLINE_RANGE | VAR for VAR in STRING;
FROM -> from VAR IMPORT;
IMPORT -> import VAR | import VAR AS VAR;
IN -> in;
IS -> is;
PASS -> pass;
RETURN ->  return VARIABLE1;
WHILE -> while ( BOOLEAN ) : ALGORITHM | while BOOLEAN : ALGORITHM;
WITH -> with FUNCTION_CALL AS VAR : ALGORITHM;
INPUT -> input KURUNG | TYPE ( INPUT );
PRINT -> print KURUNG 
