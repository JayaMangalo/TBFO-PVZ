Terminals:
+ - * / % and or variable number is ! not = > < ( ) True False string ' " if elif else : print input str float int double while for in range def class import as from return raise len range , break pass continue with open
Variables:
ALGORITHM VARIABLE VAR VAL BOOLEAN OPERATOR STRING IF ELIF ELSE PRINT EXPRES RELATION INPUT INBRACKET TYPE WHILE FOR RANGE DEF CLASS IMPORT FROM RETURN RAISE METHOD RANGE BREAK PASS CONTINUE COMMENT STRINGS OTHER_OPERATOR INLINE_RANGE INLINE_FOR
Productions:
ALGORITHM -> ALGORITHM ALGORITHM | VAR = VARIABLE | VAR OTHER_OPERATOR VARIABLE | IF | PRINT | WHILE | FOR | DEF | CLASS | IMPORT | FROM | COMMENT | ARRAY; 
VARIABLE ->  VAR | VAL | VARIABLE OPERATOR VARIABLE | INPUT | VARIABLE , VARIABLE | METHOD;
VAR -> variable;
VAL -> number | VARIABLE OPERATOR VARIABLE | VARIABLE * * VARIABLE | VARIABLE / / VARIABLE | ( VARIABLE ) | [ INLINE_FOR ] | BOOLEAN | STRING;
RELATION -> > | < | = = | ! = | < = | > =;
BOOLEAN -> True | False | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VARIABLE is VARIABLE | VARIABLE RELATION VARIABLE;
OPERATOR -> + | - | * | / | %;
OTHER_OPERATOR -> * = | + = | - = | / = | % = | / / = | * * = | & = | ^ = | > > = | < < =;
STRING -> " string " | ' string ' | STRING + STRING;
STRINGS -> string | string STRINGS;
COMMENT -> " " " STRINGS " " " | ' ' ' STRINGS ' ' ';
INBRACKET -> ( VARIABLE ) | ( );
PRINT -> print INBRACKET;
EXPRES -> ( BOOLEAN ) : ALGORITHM | BOOLEAN : ALGORITHM;
RAISE -> raise INBRACKET;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
IF -> if EXPRES | IF ELIF | IF ELSE | IF RAISE | IF BREAK | IF PASS | IF CONTINUE;
ELIF -> elif EXPRES | ELIF ELIF | ELIF ELSE;
ELSE -> else : ALGORITHM;
TYPE -> str | float | int | double;
INPUT -> input INBRACKET | TYPE ( INPUT );
RANGE -> range INBRACKET;
WHILE -> while EXPRES;
FOR -> for VAR in STRING : ALGORITHM | for VAR in RANGE : ALGORITHM;
INLINE_RANGE -> INBRACKET | VARIABLE;
INLINE_FOR -> VAR for VAR IN INLINE_RANGE | VAR for VAR in STRING;
RETURN -> return BOOLEAN | return VAL;
DEF -> def VAR INBRACKET : ALGORITHM | DEF RETURN;
CLASS -> class VAR : ALGORITHM;
IMPORT -> import VAR as VAR | import VAR;
FROM -> from VAR IMPORT;
METHOD -> len INBRACKET | with open INBRACKET as VAR